viper ~ VIPER ~ 1
head ~ HEAD ~ 1
main ~ MAIN ~ 2
is ~ IS ~ 2
@prod_price ~ VAR_ID ~ 3
: ~ COLON ~ 3
real ~ REAL ~ 3
; ~ SCOLON ~ 3
@sales_comm ~ VAR_ID ~ 4
: ~ COLON ~ 4
integer ~ INT ~ 4
; ~ SCOLON ~ 4
@custm_disc ~ VAR_ID ~ 5
: ~ COLON ~ 5
real ~ REAL ~ 5
; ~ SCOLON ~ 5
@unused ~ VAR_ID ~ 6
: ~ COLON ~ 6
chars ~ CHARS ~ 6
; ~ SCOLON ~ 6
@non_local ~ VAR_ID ~ 7
: ~ COLON ~ 7
integer ~ INT ~ 7
; ~ SCOLON ~ 7
out ~ OUT ~ 9
( ~ L_PAREN ~ 9
"Product price: " ~ STR_LIT ~ 9
) ~ R_PAREN ~ 9
; ~ SCOLON ~ 9
in ~ IN ~ 10
( ~ L_PAREN ~ 10
@prod_price ~ VAR_ID ~ 10
) ~ R_PAREN ~ 10
; ~ SCOLON ~ 10
out ~ OUT ~ 12
( ~ L_PAREN ~ 12
"Salesperson commission: " ~ STR_LIT ~ 12
) ~ R_PAREN ~ 12
; ~ SCOLON ~ 12
in ~ IN ~ 13
( ~ L_PAREN ~ 13
@sales_comm ~ VAR_ID ~ 13
) ~ R_PAREN ~ 13
; ~ SCOLON ~ 13
out ~ OUT ~ 15
( ~ L_PAREN ~ 15
"Customer discount (%): " ~ STR_LIT ~ 15
) ~ R_PAREN ~ 15
; ~ SCOLON ~ 15
in ~ IN ~ 16
( ~ L_PAREN ~ 16
@custm_disc ~ VAR_ID ~ 16
) ~ R_PAREN ~ 16
; ~ SCOLON ~ 16
@value ~ VAR_ID ~ 18
: ~ COLON ~ 18
real ~ REAL ~ 18
; ~ SCOLON ~ 18
$final_price ~ FN_ID ~ 19
( ~ L_PAREN ~ 19
@prod_price ~ VAR_ID ~ 19
, ~ COMMA ~ 19
@sales_comm ~ VAR_ID ~ 19
, ~ COMMA ~ 19
@custm_disc ~ VAR_ID ~ 19
) ~ R_PAREN ~ 19
; ~ SCOLON ~ 19
if ~ IF ~ 21
( ~ L_PAREN ~ 21
@sample ~ VAR_ID ~ 21
== ~ EQUAL_TO ~ 21
1 ~ INT_LIT ~ 21
) ~ R_PAREN ~ 21
{ ~ L_BRC ~ 21
@local ~ VAR_ID ~ 22
: ~ COLON ~ 22
integer ~ INT ~ 22
; ~ SCOLON ~ 22
@local ~ VAR_ID ~ 23
= ~ EQUALS ~ 23
1 ~ INT_LIT ~ 23
; ~ SCOLON ~ 23
@non_local ~ VAR_ID ~ 24
= ~ EQUALS ~ 24
2 ~ INT_LIT ~ 24
; ~ SCOLON ~ 24
@answer ~ VAR_ID ~ 26
= ~ EQUALS ~ 26
@local ~ VAR_ID ~ 26
+ ~ PLUS ~ 26
@non_local ~ VAR_ID ~ 26
; ~ SCOLON ~ 26
out ~ OUT ~ 27
( ~ L_PAREN ~ 27
@answer ~ VAR_ID ~ 27
) ~ R_PAREN ~ 27
; ~ SCOLON ~ 27
} ~ R_BRC ~ 28
@local ~ VAR_ID ~ 30
= ~ EQUALS ~ 30
5 ~ INT_LIT ~ 30
; ~ SCOLON ~ 30
@varctr ~ VAR_ID ~ 32
: ~ COLON ~ 32
integer ~ INT ~ 32
; ~ SCOLON ~ 32
@subctr ~ VAR_ID ~ 33
: ~ COLON ~ 33
integer ~ INT ~ 33
; ~ SCOLON ~ 33
@varlimit ~ VAR_ID ~ 34
: ~ COLON ~ 34
integer ~ INT ~ 34
= ~ EQUALS ~ 34
10 ~ INT_LIT ~ 34
; ~ SCOLON ~ 34
@varbase ~ VAR_ID ~ 35
: ~ COLON ~ 35
integer ~ INT ~ 35
= ~ EQUALS ~ 35
10 ~ INT_LIT ~ 35
; ~ SCOLON ~ 35
for ~ FOR ~ 37
( ~ L_PAREN ~ 37
@varctr ~ VAR_ID ~ 37
= ~ EQUALS ~ 37
0 ~ INT_LIT ~ 37
to ~ TO ~ 37
@varlimit ~ VAR_ID ~ 37
) ~ R_PAREN ~ 37
{ ~ L_BRC ~ 37
for ~ FOR ~ 38
( ~ L_PAREN ~ 38
@subctr ~ VAR_ID ~ 38
= ~ EQUALS ~ 38
69 ~ INT_LIT ~ 38
downto ~ DOWNTO ~ 38
@varbase ~ VAR_ID ~ 38
) ~ R_PAREN ~ 38
{ ~ L_BRC ~ 38
out ~ OUT ~ 39
( ~ L_PAREN ~ 39
@subctr ~ VAR_ID ~ 39
) ~ R_PAREN ~ 39
; ~ SCOLON ~ 39
if ~ IF ~ 40
( ~ L_PAREN ~ 40
@subctr ~ VAR_ID ~ 40
% ~ MOD ~ 40
@varctr ~ VAR_ID ~ 40
) ~ R_PAREN ~ 40
{ ~ L_BRC ~ 40
out ~ OUT ~ 41
( ~ L_PAREN ~ 41
"eto yon" ~ STR_LIT ~ 41
, ~ COMMA ~ 41
@subctr ~ VAR_ID ~ 41
) ~ R_PAREN ~ 41
; ~ SCOLON ~ 41
} ~ R_BRC ~ 42
} ~ R_BRC ~ 43
} ~ R_BRC ~ 44
while ~ WHILE ~ 46
( ~ L_PAREN ~ 46
@varctr ~ VAR_ID ~ 46
!= ~ NOTEQUAL ~ 46
20 ~ INT_LIT ~ 46
) ~ R_PAREN ~ 46
{ ~ L_BRC ~ 46
@number ~ VAR_ID ~ 47
: ~ COLON ~ 47
integer ~ INT ~ 47
; ~ SCOLON ~ 47
in ~ IN ~ 48
( ~ L_PAREN ~ 48
@number ~ VAR_ID ~ 48
) ~ R_PAREN ~ 48
; ~ SCOLON ~ 48
out ~ OUT ~ 49
( ~ L_PAREN ~ 49
@varctr ~ VAR_ID ~ 49
) ~ R_PAREN ~ 49
; ~ SCOLON ~ 49
@varctr ~ VAR_ID ~ 51
++ ~ PLUSPLUS ~ 51
; ~ SCOLON ~ 51
} ~ R_BRC ~ 52
@data ~ VAR_ID ~ 54
: ~ COLON ~ 54
integer ~ INT ~ 54
; ~ SCOLON ~ 54
@data ~ VAR_ID ~ 55
= ~ EQUALS ~ 55
0 ~ INT_LIT ~ 55
; ~ SCOLON ~ 55
do ~ DO ~ 57
{ ~ L_BRC ~ 57
if ~ IF ~ 58
( ~ L_PAREN ~ 58
@data ~ VAR_ID ~ 58
% ~ MOD ~ 58
2 ~ INT_LIT ~ 58
== ~ EQUAL_TO ~ 58
0 ~ INT_LIT ~ 58
) ~ R_PAREN ~ 58
{ ~ L_BRC ~ 58
out ~ OUT ~ 59
( ~ L_PAREN ~ 59
@data ~ VAR_ID ~ 59
) ~ R_PAREN ~ 59
; ~ SCOLON ~ 59
} ~ R_BRC ~ 60
elsif ~ ELSIF ~ 61
( ~ L_PAREN ~ 61
@data ~ VAR_ID ~ 61
% ~ MOD ~ 61
2 ~ INT_LIT ~ 61
!= ~ NOTEQUAL ~ 61
0 ~ INT_LIT ~ 61
) ~ R_PAREN ~ 61
{ ~ L_BRC ~ 61
out ~ OUT ~ 62
( ~ L_PAREN ~ 62
@data ~ VAR_ID ~ 62
) ~ R_PAREN ~ 62
; ~ SCOLON ~ 62
} ~ R_BRC ~ 63
else ~ ELSE ~ 64
{ ~ L_BRC ~ 64
out ~ OUT ~ 65
( ~ L_PAREN ~ 65
"pa