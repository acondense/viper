viper ~ VIPER ~ 1
head ~ HEAD ~ 1
main ~ MAIN ~ 3
is ~ IS ~ 3
@_base ~ VAR_ID ~ 5
: ~ COLON ~ 5
integer ~ INT ~ 5
; ~ SCOLON ~ 5
@_limit ~ VAR_ID ~ 6
: ~ COLON ~ 6
integer ~ INT ~ 6
; ~ SCOLON ~ 6
@_i ~ VAR_ID ~ 7
: ~ COLON ~ 7
integer ~ INT ~ 7
= ~ EQUALS ~ 7
0 ~ INT_LIT ~ 7
; ~ SCOLON ~ 7
out ~ OUT ~ 9
( ~ L_PAREN ~ 9
"enter base number:" ~ STR_LIT ~ 9
) ~ R_PAREN ~ 9
; ~ SCOLON ~ 9
in ~ IN ~ 10
( ~ L_PAREN ~ 10
@_base ~ VAR_ID ~ 10
) ~ R_PAREN ~ 10
; ~ SCOLON ~ 10
out ~ OUT ~ 12
( ~ L_PAREN ~ 12
"enter limit number:" ~ STR_LIT ~ 12
) ~ R_PAREN ~ 12
; ~ SCOLON ~ 12
in ~ IN ~ 13
( ~ L_PAREN ~ 13
@_limit ~ VAR_ID ~ 13
) ~ R_PAREN ~ 13
; ~ SCOLON ~ 13
while ~ WHILE ~ 15
( ~ L_PAREN ~ 15
@_base ~ VAR_ID ~ 15
!= ~ NOTEQUAL ~ 15
@_limit ~ VAR_ID ~ 15
) ~ R_PAREN ~ 15
{ ~ L_BRC ~ 15
@_i ~ VAR_ID ~ 16
++ ~ PLUSPLUS ~ 16
; ~ SCOLON ~ 16
} ~ R_BRC ~ 17
if ~ IF ~ 19
( ~ L_PAREN ~ 19
@_limit ~ VAR_ID ~ 19
== ~ EQUAL_TO ~ 19
@_base ~ VAR_ID ~ 19
) ~ R_PAREN ~ 19
{ ~ L_BRC ~ 19
out ~ OUT ~ 20
( ~ L_PAREN ~ 20
"Success" ~ STR_LIT ~ 20
) ~ R_PAREN ~ 20
; ~ SCOLON ~ 20
} ~ R_BRC ~ 21
elsif ~ ELSIF ~ 21
( ~ L_PAREN ~ 21
@_limit ~ VAR_ID ~ 21
> ~ GRTR_THAN ~ 21
@_base ~ VAR_ID ~ 21
) ~ R_PAREN ~ 21
{ ~ L_BRC ~ 21
@_base ~ VAR_ID ~ 22
= ~ EQUALS ~ 22
5 ~ INT_LIT ~ 22
; ~ SCOLON ~ 22
} ~ R_BRC ~ 23
end ~ END ~ 25
tail ~ TAIL ~ 27
